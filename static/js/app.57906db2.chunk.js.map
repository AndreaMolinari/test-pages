{"version":3,"sources":["src/Elements/Background.tsx","src/Elements/Dialog.tsx","src/BottomSheet.tsx","src/Elements/Header.tsx","src/HomeView.tsx","src/NotFoundView.tsx","src/Navigator/Main.navigator.tsx","App.tsx"],"names":["props","theme","useTheme","style","StyleSheet","create","wrapper","flex","height","backgroundColor","colors","background","safe","safeMode","View","children","isVisible","React","useMemo","visible","action","useCallback","closeOnBackdropPress","setVisible","onBackdropPress","Title","styles","button","margin","BottomSheetComponent","useState","setIsVisible","visibleDialog","setVisibleDialog","list","title","containerStyle","titleStyle","color","onPress","Background","Dialog","s","buttonStyle","modalProps","map","l","i","Content","linkTo","useLinkTo","raised","screen","Link","handlePress","Linking","canOpenURL","scheme","openURL","Alert","alert","TouchableOpacity","HomeView","h1","NotFound","NavStack","createNativeStackNavigator","linking","prefixes","config","screens","Home","BottomSheet","NoMatch","NavigationContainer","fallback","Navigator","screenOptions","header","Header","Screen","component","name","lightColors","primary","secondary","white","black","darkColors","App"],"mappings":"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","file":"static/js/app.57906db2.chunk.js","sourcesContent":["import { useTheme } from \"@rneui/themed\";\nimport React from \"react\";\nimport { StyleSheet, View } from \"react-native\";\nimport { SafeAreaView } from \"react-native-safe-area-context\";\n\ninterface BackgroundProps extends React.PropsWithChildren {\n  safeMode?: true;\n}\n\nexport default (props: BackgroundProps) => {\n  const theme = useTheme();\n\n  const style = StyleSheet.create({\n    wrapper: {\n      flex: 1,\n      height: 200,\n      backgroundColor: theme.theme.colors.background,\n    },\n    safe: {\n      flex: 1,\n    },\n  });\n\n  if (props.safeMode) {\n    return (\n      <View style={style.wrapper}>\n        <SafeAreaView style={style.safe}>{props.children}</SafeAreaView>\n      </View>\n    );\n  } else {\n    return <View style={style.wrapper}>{props.children}</View>;\n  }\n};\n","import { Dialog } from \"@rneui/base\";\nimport { Text } from \"@rneui/themed\";\nimport React from \"react\";\n\ninterface TastoConModalProps extends React.PropsWithChildren {\n  visible: boolean;\n  setVisible: (s: boolean) => void;\n  closeOnBackdropPress?: true;\n}\n\nexport default (props: TastoConModalProps) => {\n  const isVisible = React.useMemo(() => {\n    return props.visible;\n  }, [props]);\n\n  const action = React.useCallback(() => {\n    if (props.closeOnBackdropPress) {\n      props.setVisible(false);\n    } else {\n      false;\n    }\n  }, [props.closeOnBackdropPress]);\n\n  return (\n    <Dialog isVisible={isVisible} onBackdropPress={action}>\n      <Dialog.Title>\n        <Text>Dialog</Text>\n      </Dialog.Title>\n      <Text>\n        {`Se clicchi fuori mi chiudo ${\n          props.closeOnBackdropPress ? \"✅\" : \"❌\"\n        }`}\n      </Text>\n    </Dialog>\n  );\n};\n","import { Button } from \"@rneui/base\";\nimport { BottomSheet, ListItem } from \"@rneui/themed\";\nimport React, { useState } from \"react\";\nimport {\n  GestureResponderEvent,\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  ViewStyle,\n} from \"react-native\";\nimport Background from \"./Elements/Background\";\nimport Dialog from \"./Elements/Dialog\";\n\ninterface BottomSheetComponentProps extends React.PropsWithChildren {}\n\ntype ListItemProps = {\n  title: string;\n  containerStyle?: StyleProp<ViewStyle>;\n  titleStyle?: StyleProp<TextStyle>;\n  onPress?: ((event: GestureResponderEvent) => void) | null;\n};\ntype ListProps = ListItemProps[];\n\nconst BottomSheetComponent: React.FC<BottomSheetComponentProps> = () => {\n  const [isVisible, setIsVisible] = useState(false);\n  const [visibleDialog, setVisibleDialog] = React.useState(false);\n\n  const list: ListProps = [\n    { title: \"List Item 1\" },\n    { title: \"List Item 2\" },\n    {\n      title: \"Cancel\",\n      containerStyle: { backgroundColor: \"red\" },\n      titleStyle: { color: \"white\" },\n      onPress: () => setIsVisible(false),\n    },\n  ];\n\n  return (\n    <Background>\n      <Dialog\n        closeOnBackdropPress\n        visible={visibleDialog}\n        setVisible={() => setVisibleDialog((s) => !s)}\n      />\n\n      {/* <Button onPress={login} title=\"Login\" /> */}\n      <Button\n        onPress={() => setVisibleDialog((s) => !s)}\n        title=\"Open Dialog\"\n        buttonStyle={styles.button}\n      />\n      <Button\n        title=\"Open Bottom Sheet\"\n        onPress={() => setIsVisible(true)}\n        buttonStyle={styles.button}\n      />\n      <BottomSheet modalProps={{}} isVisible={isVisible}>\n        {list.map((l, i) => (\n          <ListItem\n            key={i}\n            containerStyle={l.containerStyle}\n            onPress={l.onPress}\n          >\n            <ListItem.Content>\n              <ListItem.Title style={l.titleStyle}>{l.title}</ListItem.Title>\n            </ListItem.Content>\n          </ListItem>\n        ))}\n      </BottomSheet>\n    </Background>\n  );\n};\n\nconst styles = StyleSheet.create({\n  button: {\n    margin: 10,\n  },\n});\n\nexport default BottomSheetComponent;\n","import { useLinkTo } from \"@react-navigation/native\";\nimport { Button, Header } from \"@rneui/base\";\nimport React from \"react\";\nimport { MainStackParamList } from \"../Navigator/Main.screen\";\n\nexport default () => {\n  const linkTo = useLinkTo<MainStackParamList>();\n  return (\n    <Header>\n      <Button\n        raised\n        onPress={() => linkTo({ screen: \"Home\" })}\n        color=\"secondary\"\n        title=\"Go Home\"\n      />\n    </Header>\n  );\n};\n","import { useLinkTo } from \"@react-navigation/native\";\nimport { Button } from \"@rneui/base\";\nimport { Text } from \"@rneui/themed\";\nimport React from \"react\";\nimport { Alert, Linking, TouchableOpacity } from \"react-native\";\nimport Background from \"./Elements/Background\";\nimport { MainStackParamList } from \"./Navigator/Main.screen\";\n\ninterface UrlButton extends React.PropsWithChildren {\n  scheme: string;\n}\n\nconst Link: React.FC<UrlButton> = (props) => {\n  const handlePress = React.useCallback(async () => {\n    // Checking if the link is supported for links with custom URL scheme.\n    const supported = await Linking.canOpenURL(props.scheme);\n\n    if (supported) {\n      await Linking.openURL(props.scheme);\n    } else {\n      Alert.alert(`Don't know how to open this URL: ${props.scheme}`);\n    }\n  }, [props]);\n\n  return (\n    <TouchableOpacity onPress={handlePress}>\n      <>{props.children}</>\n    </TouchableOpacity>\n  );\n};\n\nconst HomeView: React.FC = () => {\n  const linkTo = useLinkTo<MainStackParamList>();\n\n  return (\n    <Background safeMode>\n      <Text h1>Io sono la home</Text>\n\n      <Link scheme=\"whatsapp://send?text=Hello%2C%20World!\">\n        <Text>Saluta Qualcuno su whatsapp</Text>\n      </Link>\n\n      <Link scheme=\"lifiart://Home\">\n        <Text>Apri lifiapp</Text>\n      </Link>\n\n      <Button onPress={() => linkTo({ screen: \"BottomSheet\" })}>\n        <Text>BottomSheet</Text>\n      </Button>\n    </Background>\n  );\n};\n\nexport default HomeView;\n","import { Text } from \"@rneui/themed\";\nimport React from \"react\";\nimport Background from \"./Elements/Background\";\n\nconst NotFound: React.FC = () => {\n  return <></>;\n  return (\n    <Background>\n      <Text h1 style={{ color: \"red\" }}>\n        Questa pagina non esiste\n      </Text>\n    </Background>\n  );\n};\n\nexport default NotFound;\n","import { NavigationContainer } from \"@react-navigation/native\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport { Text } from \"@rneui/themed\";\nimport React from \"react\";\nimport BottomSheetComponent from \"../BottomSheet\";\nimport Header from \"../Elements/Header\";\nimport HomeView from \"../HomeView\";\nimport NotFound from \"../NotFoundView\";\n\nconst NavStack = createNativeStackNavigator();\n\nconst configs = {\n  screens: {\n    Home: \"Home\",\n    BottomSheet: \"BottomSheet\",\n    NoMatch: \"*\",\n  },\n};\n\nconst linking = {\n  prefixes: [\n    \"lifi-zone://\",\n    \"https://andreamolinari.github.io/test-pages/\",\n    \"http://localhost:19006/test-pages/\",\n  ],\n  config: configs,\n};\n\nexport default () => {\n  return (\n    <NavigationContainer linking={linking} fallback={<Text>Loading...</Text>}>\n      <NavStack.Navigator\n        screenOptions={{\n          header: () => <Header />,\n        }}\n      >\n        <NavStack.Screen component={HomeView} name=\"Home\" />\n        <NavStack.Screen component={BottomSheetComponent} name=\"BottomSheet\" />\n        <NavStack.Screen component={NotFound} name=\"NoMatch\" />\n      </NavStack.Navigator>\n    </NavigationContainer>\n  );\n};\n","import { ThemeProvider } from \"@rneui/themed\";\nimport { SafeAreaProvider } from \"react-native-safe-area-context\";\nimport MainNavigator from \"./src/Navigator/Main.navigator\";\n\nconst theme = {\n  lightColors: {\n    primary: \"#333\",\n    background: \"#111\",\n    secondary: \"red\",\n    white: \"#000\",\n    black: \"#fff\",\n  },\n  darkColors: {\n    primary: \"#333\",\n    secondary: \"red\",\n    background: \"#111\",\n    white: \"black\",\n    black: \"white\",\n  },\n};\n\nconst App = () => {\n  return (\n    <SafeAreaProvider>\n      <ThemeProvider theme={theme}>\n        <MainNavigator />\n      </ThemeProvider>\n    </SafeAreaProvider>\n  );\n};\n\nexport default App;\n"],"sourceRoot":""}